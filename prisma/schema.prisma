// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// permite que o usuario tenha varias coisas;
model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  email String? @unique
  emailVerified DateTime?
  image String?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  favoriteIds String[] @db.ObjectId
  accounts Account[]
  listenings Listening[]
  reservations Reservation[]

}

// modelo da conta, que é a primeira relação 

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type String
  provider String
  providerAccountId String? @db.String
  refresh_token String? @db.String
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Listening {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  description String
  imageSrc String
  createdAt DateTime
  category String
  roomCount Int
  bathRoomCount Int
  guestCount Int
  locationValue String
  userId String @db.ObjectId
  price Int 

   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
   reservations Reservation[]

}

model Reservation {
    id String @id @default(auto()) @map("_id") @db.ObjectId
   userId String @db.ObjectId
   listeningId String @db.ObjectId
   startDate DateTime
   emDate DateTime
   totalPrice Int 
   createdAt DateTime @default(now())

   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
   listening Listening @relation(fields: [listeningId], references: [id], onDelete: Cascade)
}